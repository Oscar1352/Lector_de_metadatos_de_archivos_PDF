/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto_1.Interfaces;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.pdfbox.cos.COSDictionary;
import org.apache.pdfbox.cos.COSName;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDDocumentInformation;
import org.apache.pdfbox.pdmodel.PDResources;
import org.apache.pdfbox.pdmodel.graphics.PDXObject;
import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;

/**
 *
 * @author urbin
 */
public class frmPaginaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form frmPaginaPrincipal
     */
    public frmPaginaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Página principal");
        setIconImages(null);

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("Lector de metadatos avanzado");

        jLabel2.setText("Presione el siguiente boton para seleccionar un archivo:");

        jButton1.setBackground(new java.awt.Color(0, 153, 153));
        jButton1.setText("Seleccionar carpeta");
        jButton1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton1MouseExited(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Presione el siguiente boton para seleccionar una carpeta:");

        jButton2.setBackground(new java.awt.Color(153, 153, 0));
        jButton2.setText("Seleccionar archivo");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jButton2MouseExited(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jSeparator1.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));

        jMenu1.setText("Inicio");
        jMenu1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ayuda");
        jMenu2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Salir");
        jMenu3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 61, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(80, 80, 80))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jButton2)
                                        .addGap(11, 11, 11)))
                                .addGap(15, 15, 15))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)))
                .addGap(16, 16, 16))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser jfc = new JFileChooser();

        jfc.showOpenDialog(jfc);
        File archivoSeleccionado = jfc.getSelectedFile();

        String parent = archivoSeleccionado.getParent();
        String nuevoParent = parent.replaceAll("\\\\", "\\\\\\\\");
        JOptionPane.showMessageDialog(null, "Carpeta Seleccionada -> " + nuevoParent);
        
        String rutaCarpeta = nuevoParent;

        File carpeta = new File(rutaCarpeta);

        if (carpeta.exists() && carpeta.isDirectory()) {
            File[] archivos = carpeta.listFiles();

            if (archivos != null) {
                for (File archivo : archivos) {
                    if (archivo.isFile() && archivo.getName().toLowerCase().endsWith(".pdf")) {
                        try {
                            PDDocument pdf = PDDocument.load(archivo);
                            PDDocumentInformation info = pdf.getDocumentInformation();
                            
                            System.out.println("Archivo: " + archivo.getName());
                            CalcularTamañoArchivos(archivo);
                            CalcularTamañoPaginas(archivo);
                            CalcularNumeroPaginas(pdf);
                            ObtenerTitulo(info);
                            ObtenerAsuntoPDF(info);
                            ObtenerPalabrasClaves(info);
                            ObtenerTipoPDF(pdf);
                            ObtenerVersionPDF(pdf);
                            ObtenerAplicacionCreador(info);
                            ObtenerImagenes(pdf);
                            ObtenerFuentes(pdf);
                            System.out.println("**************************************************");
                            pdf.close();
                        } catch (IOException e) {
                            System.err.println("Error al leer el archivo PDF: " + archivo.getName());
                    }
                }
            }
        } else {
            System.err.println("La carpeta no existe o no es una carpeta válida.");
        }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseEntered
        jButton1.setBackground(new Color(0, 102, 102));
    }//GEN-LAST:event_jButton1MouseEntered

    private void jButton1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseExited
        jButton1.setBackground(new Color(0, 153, 153));
    }//GEN-LAST:event_jButton1MouseExited

    private void jButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseEntered
        jButton2.setBackground(new Color(153, 102, 0));
    }//GEN-LAST:event_jButton2MouseEntered

    private void jButton2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseExited
        jButton2.setBackground(new Color(153, 153, 0));
    }//GEN-LAST:event_jButton2MouseExited

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        JOptionPane.showMessageDialog(null, "Gracias por utilizar nuestro programa");
        System.exit(0);
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY); // Configura el JFileChooser para seleccionar solo archivos
        int resultado = jfc.showOpenDialog(null);

        if (resultado == JFileChooser.APPROVE_OPTION) {
            File archivoSeleccionado = jfc.getSelectedFile();

            if (archivoSeleccionado.isFile() && archivoSeleccionado.getName().toLowerCase().endsWith(".pdf")) {
                // Si es un archivo PDF, obtén su información
                try {
                    frmInfoArchivo a = new frmInfoArchivo(archivoSeleccionado);
                    a.show(true);
                } catch (IOException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error al leer el archivo PDF.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El elemento seleccionado no es un archivo PDF válido.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No se seleccionó ningún archivo.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    // Definiar el tamaño de los archivos pdfs
    public static void CalcularTamañoArchivos(File archivo) {
        long tamanoBytes = archivo.length();
        float tamaño = tamanoBytes / 1000;
        
        if (tamaño > 1000) {
            System.out.println(tamaño / 1000 + " Megabytes");
        } else {
            System.out.println(tamaño + " Kilobytes");
        }
    }
    
        // Definir el tamaño de las paginas de los archivos pdfs
    public static void CalcularTamañoPaginas(File archivo) {

        try (PDDocument document = PDDocument.load(archivo)) {
            int numeroDePaginas = document.getNumberOfPages();

            for (int pageNum = 0; pageNum < numeroDePaginas; pageNum++) {
                PDPage page = document.getPage(pageNum);

                float ancho = page.getMediaBox().getWidth();
                float alto = page.getMediaBox().getHeight();

                System.out.println("Página " + (pageNum + 1) + ":");
                System.out.println("Ancho: " + ancho + " puntos");
                System.out.println("Alto: " + alto + " puntos");
                System.out.println();
            }
            System.out.println("------------------------");
        } catch (IOException e) {
        }
    }
 

    // Calcular el numero de paginas de los archivos pdfs
    public static void CalcularNumeroPaginas(PDDocument pdf) {
        int numPaginas = pdf.getNumberOfPages();

        System.out.println("Número de páginas: " + numPaginas);
    }

    // Definir el titulo de los archivos pdfs
    public static void ObtenerTitulo(PDDocumentInformation info) {
        String titulo = info.getTitle();
        
        if (titulo != null && !titulo.isEmpty()) {
            System.out.println("Titulo: " + titulo);
        } else {
            System.out.println("El archivo PDF no tiene título.");
        }
    } 

    // Determinar el asuntos de los archivos pdfs
    public static void ObtenerAsuntoPDF(PDDocumentInformation info) {
        String asuntoPDF = info.getSubject();
        
        if (asuntoPDF != null && !asuntoPDF.isEmpty()) {
            System.out.println("Asunto: " + asuntoPDF);
        } else {
            System.out.println("El archivo PDF no tiene asunto");
        }
    }
    
    // Determinar las palabras claves del pdf
    public static void ObtenerPalabrasClaves(PDDocumentInformation info){
        String palabrasClave = info.getKeywords();
        
        if (palabrasClave != null && !palabrasClave.isEmpty()) {
            System.out.println("Palabras clave: " + palabrasClave);
        } else {
            System.out.println("Este archivo no tiene palabras clave");
        }
    }
    
    // Determinar el tipo de pdf que es
    public static void ObtenerTipoPDF(PDDocument pdf) {
            if (pdf.isEncrypted()) {
                System.out.println("El tipo de archivo PDF es: Encriptado");
            } else {
                System.out.println("El tipo de archivo PDF es: No encriptado");
            }
    }
    
    // Determinar la version del pdf
    public static void ObtenerVersionPDF(PDDocument pdf){
        float version = pdf.getVersion();
        
        System.out.println("Numero de version: " + version);
    }
        
    // Determinar la aplicacion con la que fue creada el pdf
    public static void ObtenerAplicacionCreador(PDDocumentInformation info){
        String aplicacionCreadora = info.getCreator();
        
        if (aplicacionCreadora != null && !aplicacionCreadora.isEmpty()) {
            System.out.println("Aplicación creadora del archivo: " + aplicacionCreadora);
        } else {
            System.out.println("El archivo PDF no tiene la aplicación creadora.");
        }
    }
    
    // Determinar las imagenes del pdf
    public static void ObtenerImagenes(PDDocument pdf) throws IOException{
        int pageNum = 0;

        for (PDPage page : pdf.getPages()) {
            PDResources resources = page.getResources();
            for (COSName xObjectName : resources.getXObjectNames()) {
                PDXObject xObject = resources.getXObject(xObjectName);
                if (xObject instanceof PDImageXObject) {
                    PDImageXObject image = (PDImageXObject) xObject;
                    System.out.println("Página " + pageNum + ": Imagen encontrada - Formato: " + image.getSuffix() + ", Ancho: " + image.getWidth() + ", Alto: " + image.getHeight());
                } else if (xObject instanceof PDFormXObject) {
                    PDFormXObject form = (PDFormXObject) xObject;
                    for (COSName subXObjectName : form.getResources().getXObjectNames()) {
                        PDXObject subXObject = form.getResources().getXObject(subXObjectName);
                        if (subXObject instanceof PDImageXObject) {
                            PDImageXObject subImage = (PDImageXObject) subXObject;
                            System.out.println("Página " + pageNum + ": Imagen encontrada - Formato: " + subImage.getSuffix() + ", Ancho: " + subImage.getWidth() + ", Alto: " + subImage.getHeight());
                        }
                    }
                }
            }

            pageNum++;
        }
    }
    
    // Determinar las fuentes del pdf
    public static void ObtenerFuentes(PDDocument pdf){
        Map<String, String> fontMapping = new HashMap<>();
        fontMapping.put("TT0", "Times New Roman");
        fontMapping.put("TT1", "Calibri");
        fontMapping.put("TT2", "Arial");
        fontMapping.put("TT3", "Courier-BoldOblique");

        Set<String> uniqueFonts = new HashSet<>();

        for (PDPage page : pdf.getPages()) {
            PDResources resources = page.getResources();
            COSDictionary fonts = (COSDictionary) resources.getCOSObject().getDictionaryObject(COSName.FONT);
            if (fonts != null) {
                for (COSName fontName : fonts.keySet()) {
                    String fontNameString = fontName.getName();
                    String mappedFontName = fontMapping.get(fontNameString);
                    if (mappedFontName != null) {
                        uniqueFonts.add(mappedFontName);
                    }
                }
            }
        }

        System.out.println("Fuentes únicas: " + String.join(", ", uniqueFonts));
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPaginaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPaginaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPaginaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPaginaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmPaginaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
