/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto_1;

import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDDocumentInformation;

/**
 *
 * @author urbin
 */
public class frmPaginaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form frmPaginaPrincipal
     */
    public frmPaginaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel1.setText("Lector de metadatos avanzado");

        jLabel2.setText("Presione el siguiente boton para seleccionar una carpeta");

        jButton1.setText("Seleccionar carpeta");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(36, 36, 36)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jButton1))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser jfc = new JFileChooser();
        
        jfc.showOpenDialog(jfc);
        File archivoSeleccionado = jfc.getSelectedFile();
        
        String parent = archivoSeleccionado.getParent();
        String nuevoParent = parent.replaceAll("\\\\", "\\\\\\\\");
        JOptionPane.showMessageDialog(null, "Carpeta Seleccionada -> " + nuevoParent);
        
        CalcularTamañoArchivos(nuevoParent);
        CalcularTamañoPaginas(nuevoParent);
        CalcularNumeroPaginas(nuevoParent);
        ObtenerTitulo(nuevoParent);
    }//GEN-LAST:event_jButton1ActionPerformed

    
    public static void CalcularTamañoArchivos(String ruta){
        String rutaCarpeta = ruta;

        File carpeta = new File(rutaCarpeta);

        if (carpeta.exists() && carpeta.isDirectory()) {
            File[] archivos = carpeta.listFiles();

            if (archivos != null) {
                for (File archivo : archivos) {
                    if (archivo.isFile() && archivo.getName().toLowerCase().endsWith(".pdf")) {
                        long tamanoBytes = archivo.length() / 1000;

                        System.out.println("Archivo: " + archivo.getName());
                        System.out.println("Tamaño en bytes: " + tamanoBytes + " Kilobytes");
                        System.out.println("------------------------");
                    }
                }
            }
        } else {
            System.err.println("La carpeta no existe o no es una carpeta válida.");
        }
    }
    
    public static void CalcularNumeroPaginas(String ruta){
        String rutaCarpeta = ruta;
        
        File carpeta = new File(rutaCarpeta);

        if (carpeta.exists() && carpeta.isDirectory()) {
            File[] archivos = carpeta.listFiles();

            if (archivos != null) {
                for (File archivo : archivos) {
                    if (archivo.isFile() && archivo.getName().toLowerCase().endsWith(".pdf")) {
                        try {
                            PDDocument pdf = PDDocument.load(archivo);
                            int numPaginas = pdf.getNumberOfPages();
                            pdf.close();
                            
                            System.out.println("Archivo: " + archivo.getName());
                            System.out.println("Número de páginas: " + numPaginas);
                            System.out.println("------------------------");
                        } catch (IOException e) {
                            System.err.println("Error al leer el archivo PDF: " + archivo.getName());
                        }
                    }
                }
            }
        } else {
            System.err.println("La carpeta no existe o no es una carpeta válida.");
        }
    }
    
    public static void ObtenerTitulo(String ruta){
        String rutaCarpeta = ruta;

        File directorio = new File(rutaCarpeta);

        if (directorio.isDirectory()) {
            File[] archivosPDF = directorio.listFiles((dir, nombre) -> nombre.toLowerCase().endsWith(".pdf"));

            if (archivosPDF != null) {
                for (File archivo : archivosPDF) {
                    try (PDDocument document = PDDocument.load(archivo)) {
                        PDDocumentInformation info = document.getDocumentInformation();
                        String titulo = info.getTitle();

                        if (titulo != null && !titulo.isEmpty()) {
                            System.out.println("Archivo: " + archivo.getName());
                            System.out.println("Titulo: " + titulo);
                            System.out.println("------------------------");
                        } else {
                            System.out.println("El archivo '" + archivo.getName() + "' no tiene título.");
                            System.out.println("------------------------");
                        }
                    } catch (IOException e) {
                    }
                }
            }
        }
    }
    
    public static void CalcularTamañoPaginas(String ruta){
       String rutaCarpeta = ruta;
        
        File directorio = new File(rutaCarpeta);

        if (directorio.isDirectory()) {
            File[] archivosPDF = directorio.listFiles((dir, nombre) -> nombre.toLowerCase().endsWith(".pdf"));

            if (archivosPDF != null) {
                for (File archivo : archivosPDF) {
                    try (PDDocument document = PDDocument.load(archivo)) {
                        int numeroDePaginas = document.getNumberOfPages();

                        System.out.println("Archivo: " + archivo.getName());
                        
                        for (int pageNum = 0; pageNum < numeroDePaginas; pageNum++) {
                            PDPage page = document.getPage(pageNum);

                            float ancho = page.getMediaBox().getWidth();
                            float alto = page.getMediaBox().getHeight();

                            System.out.println("Página " + (pageNum + 1) + ":");
                            System.out.println("Ancho: " + ancho + " puntos");
                            System.out.println("Alto: " + alto + " puntos");
                            System.out.println();
                        }
                        System.out.println("------------------------");
                    } catch (IOException e) {
                    }
                }
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPaginaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPaginaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPaginaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPaginaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmPaginaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
